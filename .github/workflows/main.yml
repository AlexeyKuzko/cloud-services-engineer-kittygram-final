name: Main Workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    # Копируем код проекта:
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action:
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python:
      with:
        python-version: 3.9
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # устанавливаем зависимости проекта:
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    # Запускаем flake8:
    - name: Test with flake8
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run: python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker:
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub:
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password:
        with:
          username: <ваш_username_docker_hub> 
          password: <ваш_пароль_docker_hub>
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо. Хранить пароль надо в Secrets.
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub:
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию образа:
          tags: ваш-логин-на-docker-hub/имя_образа:latest

  build_frontend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker:
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub:
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры use
        with:
          username: <ваш_username_docker_hub> 
          password: <ваш_пароль_docker_hub>
          # Хорошо ли держать логин и пароль прямо в коде
          # Нет, это нехорошо. Хранить пароль надо в Secr
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что н
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужн
          # но и отправить на Docker Hub:
          push: true
          # В параметре tags задаётся название и тег для 
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указыват
          tags: ваш-логин-на-docker-hub/имя_образа:latest

  build_gateway_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker:
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub:
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры use
        with:
          username: <ваш_username_docker_hub> 
          password: <ваш_пароль_docker_hub>
          # Хорошо ли держать логин и пароль прямо в коде
          # Нет, это нехорошо. Хранить пароль надо в Secr
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что н
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужн
          # но и отправить на Docker Hub:
          push: true
          # В параметре tags задаётся название и тег для 
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указыват
          tags: ваш-логин-на-docker-hub/имя_образа:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех фронтенда, бэкенда и гейтвея:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер:
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "~/kittygram"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение:
        script: |
          cd ~/kittygram
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  telegram-notify:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Send Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_SEND_TO_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Deployment of kittygram completed successfully!
          Author: ${{ github.actor }}
          Latest commit message: ${{ github.event.commits[0].message }}
          View commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}